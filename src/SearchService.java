
import java.awt.CardLayout;
import java.awt.Component;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author ASUS
 */
public class SearchService extends javax.swing.JPanel {

    /**
     * Creates new form SearchService
     */
    public SearchService(ServiceDatabase database, Connection connect, JPanel parent) {
        this.connect=connect;
        this.database=database;
        this.parent=parent;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        searchServicePanel = new javax.swing.JPanel();
        keywordButton = new javax.swing.JRadioButton();
        locationButton = new javax.swing.JRadioButton();
        searchField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        sortBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        requestButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        serviceTable = new javax.swing.JTable();
        upgradeButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 204, 204));
        setForeground(new java.awt.Color(240,240,240));
        setPreferredSize(new java.awt.Dimension(1009, 468));

        searchServicePanel.setBackground(new java.awt.Color(0, 204, 204));

        buttonGroup1.add(keywordButton);
        keywordButton.setFont(new java.awt.Font("Century Gothic", 1, 13)); // NOI18N
        keywordButton.setSelected(true);
        keywordButton.setText("By keyword");

        buttonGroup1.add(locationButton);
        locationButton.setFont(new java.awt.Font("Century Gothic", 1, 13)); // NOI18N
        locationButton.setText("By location");

        searchField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchFieldCaretUpdate(evt);
            }
        });
        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel1.setText("Search Services ");

        sortBox.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        sortBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ascending", "Descending"}));
        sortBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortBoxActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 13)); // NOI18N
        jLabel2.setText("Sort price by");

        requestButton.setBackground(new java.awt.Color(32,33,55));
        requestButton.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        requestButton.setForeground(new java.awt.Color(255, 255, 255));
        requestButton.setText("Request Service");
        requestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestButtonActionPerformed(evt);
            }
        });

        Object[][] data = database.getServiceOfferings();
        serviceTable.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        serviceTable.setModel(new javax.swing.table.DefaultTableModel(
            data,
            new String [] {
                "ID", "Name", "Location", "Cost", "Rating"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int row, int column) {
                return false;
            }
        });
        serviceTable.setShowHorizontalLines(false);
        serviceTable.setShowVerticalLines(false);
        serviceTable.getTableHeader().setReorderingAllowed(false);
        //serviceTable.setAutoResizeMode( JTable.AUTO_RESIZE_OFF );

        for (int column = 0; column < serviceTable.getColumnCount(); column++)
        {
            TableColumn tableColumn = serviceTable.getColumnModel().getColumn(column);
            int preferredWidth = tableColumn.getMinWidth();
            int maxWidth = tableColumn.getMaxWidth();

            for (int row = 0; row < serviceTable.getRowCount(); row++)
            {
                TableCellRenderer cellRenderer = serviceTable.getCellRenderer(row, column);
                Component c = serviceTable.prepareRenderer(cellRenderer, row, column);
                int width = c.getPreferredSize().width + serviceTable.getIntercellSpacing().width;
                preferredWidth = Math.max(preferredWidth, width);

                //  We've exceeded the maximum width, no need to check other rows

                if (preferredWidth >= maxWidth)
                {
                    preferredWidth = maxWidth;
                    break;
                }
            }

            tableColumn.setPreferredWidth( preferredWidth );
        }
        jScrollPane2.setViewportView(serviceTable);

        javax.swing.GroupLayout searchServicePanelLayout = new javax.swing.GroupLayout(searchServicePanel);
        searchServicePanel.setLayout(searchServicePanelLayout);
        searchServicePanelLayout.setHorizontalGroup(
            searchServicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchServicePanelLayout.createSequentialGroup()
                .addGroup(searchServicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchServicePanelLayout.createSequentialGroup()
                        .addGroup(searchServicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(searchServicePanelLayout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addComponent(jLabel1))
                            .addGroup(searchServicePanelLayout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(keywordButton)))
                        .addGap(30, 30, 30)
                        .addGroup(searchServicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(searchServicePanelLayout.createSequentialGroup()
                                .addComponent(locationButton)
                                .addGap(131, 131, 131)
                                .addComponent(jLabel2)
                                .addGap(32, 32, 32)
                                .addComponent(sortBox, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 773, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(searchServicePanelLayout.createSequentialGroup()
                        .addGap(300, 300, 300)
                        .addComponent(requestButton)))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        searchServicePanelLayout.setVerticalGroup(
            searchServicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchServicePanelLayout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addGroup(searchServicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(searchField))
                .addGap(23, 23, 23)
                .addGroup(searchServicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keywordButton)
                    .addComponent(locationButton)
                    .addComponent(sortBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(52, 52, 52)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(requestButton)
                .addGap(36, 36, 36))
        );

        upgradeButton.setBackground(new java.awt.Color(32,33,55));
        upgradeButton.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        upgradeButton.setForeground(new java.awt.Color(255, 255, 255));
        upgradeButton.setText("Upgrade to Provider");
        upgradeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upgradeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(searchServicePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(394, 394, 394)
                        .addComponent(upgradeButton)))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(searchServicePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(upgradeButton)
                .addContainerGap(30, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFieldActionPerformed

    private void requestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestButtonActionPerformed
        // TODO add your handling code here:
        int selectedIndex = serviceTable.getSelectedRow();
        if (selectedIndex!=-1) { //there's a row selected
            int serviceID=(int)serviceTable.getValueAt(selectedIndex,0);
            ServiceOffering service= database.getServiceOffering(serviceID);
            parent.add(new CreateRequest(database,connect,parent,service),"Create Request");
            CardLayout cLayout=(CardLayout) parent.getLayout();
            cLayout.show(parent,"Create Request");
        }
    }//GEN-LAST:event_requestButtonActionPerformed

    private void searchFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchFieldCaretUpdate
        // TODO add your handling code here:
        String key = searchField.getText();
        if (key!=null) {
            if (keywordButton.isSelected()) {
               Object[][] data = database.getServiceOfferingsByKeyword(key);
                serviceTable.setModel(new javax.swing.table.DefaultTableModel(
                    data,
                    new String [] {
                        "ID", "Name", "Location", "Cost", "Rating"
                    }
                ) {
                    Class[] types = new Class [] {
                        java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class
                    };

                    public Class getColumnClass(int columnIndex) {
                        return types [columnIndex];
                    }
                    
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                });
            }
            else if (locationButton.isSelected()) {
                Object[][] data = database.getServiceOfferingsByLocation(key);
                serviceTable.setModel(new javax.swing.table.DefaultTableModel(
                    data,
                    new String [] {
                        "ID", "Name", "Location", "Cost", "Rating"
                    }
                ) {
                    Class[] types = new Class [] {
                        java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class
                    };

                    public Class getColumnClass(int columnIndex) {
                        return types [columnIndex];
                    }
                    
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                });
            }
            jScrollPane2.setViewportView(serviceTable);
        }
    }//GEN-LAST:event_searchFieldCaretUpdate

    private void sortBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortBoxActionPerformed
        // TODO add your handling code here:
        JComboBox cb = (JComboBox) evt.getSource();
        String order = (String)cb.getSelectedItem();
        TableRowSorter<TableModel> sorter= new TableRowSorter<>(serviceTable.getModel());
        serviceTable.setRowSorter(sorter);
        ArrayList<RowSorter.SortKey> sortKeys=new ArrayList<>();
        RowSorter.SortKey sortKey;
        if (order.equals("Ascending")) {
            sortKey= new RowSorter.SortKey(3,SortOrder.ASCENDING);
        }
        else {
            sortKey= new RowSorter.SortKey(3,SortOrder.DESCENDING);
        }
        sortKeys.add(sortKey);
        sortKeys.add(new RowSorter.SortKey(4,SortOrder.DESCENDING)); //always sort rating descending for equal values of price
        sorter.setSortKeys(sortKeys);
    }//GEN-LAST:event_sortBoxActionPerformed

    private void upgradeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upgradeButtonActionPerformed
        // TODO add your handling code here:
        if (!database.isProvider(database.getCurrentUser())) {
            int n=JOptionPane.showConfirmDialog(parent,"Pay $10 to upgrade to provider?",
                                            "Upgrade", JOptionPane.YES_NO_OPTION,
                                            JOptionPane.QUESTION_MESSAGE,
                                            null);
            if (n==JOptionPane.YES_OPTION) {
                CreditCard card = database.getCreditCard(database.getCurrentUser().getUsername());
                if (card.decreaseAmount(10)) {
                    ServiceProvider provider = new ServiceProvider(database.getCurrentUser(),card.getAmount());
                    try {
                        statement=connect.prepareStatement("update card set amount=? where username=?");
                        statement.setDouble(1,card.getAmount());
                        statement.setString(2,provider.getUsername());
                        int result1=statement.executeUpdate();

                        statement=connect.prepareStatement("insert into provider values(?,?,?)");
                        statement.setString(1, provider.getUsername());
                        statement.setDouble(2, provider.getProviderRating());
                        statement.setDouble(3,provider.getAmount());
                        int result2=statement.executeUpdate();

                        if (result1!=1) {
                            JOptionPane.showMessageDialog(parent, "Cannot process transaction");
                        }
                        else if (result2!=1) {
                            JOptionPane.showMessageDialog(parent,"Cannot upgrade user to provider");
                        }
                        else {
                            JOptionPane.showMessageDialog(parent,"Upgrade successfully");
                            database.addProvider(provider);
                        }
                    }
                    catch(Exception e) {
                        System.out.println(e);
                    }
                }
                else {
                    JOptionPane.showMessageDialog(parent, "You do not have enough money");
                }
            }
        }
        else {
            JOptionPane.showMessageDialog(parent,"You are a provider already");
        }
    }//GEN-LAST:event_upgradeButtonActionPerformed
    
    public javax.swing.JTable getServiceTable() {
        return serviceTable;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton keywordButton;
    private javax.swing.JRadioButton locationButton;
    private javax.swing.JButton requestButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JPanel searchServicePanel;
    private javax.swing.JTable serviceTable;
    private javax.swing.JComboBox<String> sortBox;
    private javax.swing.JButton upgradeButton;
    // End of variables declaration//GEN-END:variables
    private ServiceDatabase database;
    private Connection connect;
    private PreparedStatement statement;
    private JPanel parent;
}
